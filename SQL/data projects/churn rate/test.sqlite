--Churn Rates: calculate by each month using COUNT()
--OR calculate churn rate over multiple months by combining tables
SELECT 100./2000 AS 'churn rate';
SELECT 450./3000 AS 'churn rate';

--Single month churn rate: works but some customers are counted twice w/ repeated conditionals
SELECT 1.0 *
(
  SELECT COUNT(*)
  FROM subscriptions
  WHERE subscription_start < '2017-01-01'
  AND (
    subscription_end BETWEEN '2017-01-01' AND '2017-01-31'
  )
) / (
  SELECT COUNT(*)
  FROM subscriptions
  WHERE subscription_start < '2017-01-01'
  AND (
    (subscription_end >= '2017-01-01')
    OR (subscription_end IS NULL)
  )
)
AS result;

--Single-month churn rate revisited: ensure multi-month capability using WITH and CASE
WITH enrollments AS
(SELECT *
FROM subscriptions
WHERE subscription_start < '2017-01-01'
AND (
  (subscription_end >= '2017-01-01')
  OR (subscription_end IS NULL)
)),
status AS
(SELECT
CASE
  WHEN (subscription_end > '2017-01-31')
    OR (subscription_end IS NULL) THEN 0
  ELSE 1
  END as is_canceled,
CASE
  WHEN (subscription_start < '2017-01-01')
    AND (
      (subscription_end >= '2017-01-01')
        OR (subscription_end IS NULL)
    ) THEN 1
    ELSE 0
  END as is_active
FROM enrollments
)
SELECT 1.0 * SUM(is_canceled)/SUM(is_active) FROM status;

--Building table of months
WITH months AS
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
),
--cross joining mos & users
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months),
--determining active status
status AS
(SELECT id, first_day as month,
CASE
  WHEN (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active,
--determining cancellation status
CASE
  WHEN subscription_end BETWEEN first_day AND last_day THEN 1
  ELSE 0
END as is_canceled
FROM cross_join),
--^^status currently displays user id, current month, bool active, bool canceled
--Summing active and canceled monthly users
status_aggregate AS
(SELECT month,
        SUM(is_active) AS 'active',
        SUM(is_canceled) AS 'canceled'
FROM status
GROUP BY 1)
--Calculating monthly churn rates
SELECT month,
       1.0 * status_aggregate.canceled / status_aggregate.active AS 'churn rate'
FROM status_aggregate;