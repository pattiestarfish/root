/* performing calculations on multiple rows */
COUNT(): count the number of rows
SUM(): the sum of the values in a column
MAX()/MIN(): the largest/smallest value
AVG(): the average of the values in a column
ROUND(): round the values in the column
Aggregate functions combine multiple rows together to form a single value of more meaningful information.

GROUP BY is a clause used with aggregate functions to combine data from one or more columns.
HAVING limit the results of a query based on an aggregate property.
--------------------------------------------------------------------
SELECT COUNT(*) FROM fake_apps
  WHERE price = 0;

SELECT MAX(price) FROM fake_apps;

SELECT ROUND(AVG(price),2) FROM fake_apps;

SELECT price, COUNT(*) FROM fake_apps
WHERE downloads > 20000
GROUP BY price;

SELECT category, SUM(downloads) FROM fake_apps
GROUP BY category;

SELECT name, category, price, AVG(downloads)
FROM fake_apps
GROUP BY 2, 3
ORDER BY 4 DESC;

/* Conditions containing aggregate functions require having instead of where (where sifts through single row) */
SELECT price,
  ROUND(AVG(downloads)),
  COUNT(*)
FROM fake_apps
GROUP by price
HAVING COUNT(*) > 10;

SELECT COUNT(*)
FROM users
WHERE email LIKE "%.com";

SELECT first_name, COUNT(1)
FROM users
GROUP BY 1
ORDER BY COUNT(1) DESC;

SELECT
  ROUND(watch_duration_in_minutes,0) as 'duration',
  COUNT(*) as 'count'
FROM watch_history
GROUP BY duration
ORDER BY duration ASC;

SELECT user_id, SUM(amount)
FROM payments
WHERE pay_date IS NOT NULL
  AND status = 'paid'
GROUP BY 1
ORDER BY 2 DESC;

SELECT user_id, SUM(watch_duration_in_minutes)
FROM watch_history
GROUP BY user_id
HAVING SUM(watch_duration_in_minutes) > 400;

SELECT ROUND(SUM(watch_duration_in_minutes), 0)
FROM watch_history;

SELECT pay_date, SUM(amount)
FROM payments
WHERE status='paid'
GROUP BY 1
ORDER BY 2 DESC;

SELECT AVG(amount)
FROM payments
WHERE status='paid';

SELECT MAX(watch_duration_in_minutes) AS 'max',
  MIN(watch_duration_in_minutes) AS 'min'
FROM watch_history;
