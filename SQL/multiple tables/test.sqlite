/*** subscription transactions
split into 3 tables
1. orders --> order_id, customer_id, subscription_id, purchase_Date
2. subscriptions --> subscription_id, description, price_per_month, subscription_length
3. customers --> customer_id, customer_name, address
- inner joins will not merge tables if no matching values
- left join will keep all rows from 1st table regardless of matched values
- only 1 primary key per table, when this appears in a different table known as foreign key
    commonly join foreign key from 1 table with primary key of another table

SQL appending rules: columns must be same length, and data types must match
***/

SELECT *
FROM orders
JOIN subscriptions
  ON orders.subscription_id = subscriptions.subscription_id;

SELECT *
FROM orders
JOIN subscriptions
  ON orders.subscription_id = subscriptions.subscription_id
WHERE description = 'Fashion Magazine';
#-----------------------------

SELECT COUNT(*)
FROM newspaper;

SELECT COUNT(*)
FROM online;

SELECT COUNT(*)
FROM newspaper
JOIN online
  ON newspaper.id = online.id;
#-----------------------------------

SELECT *
FROM newspaper
LEFT JOIN online
  ON newspaper.id = online.id;

SELECT *
FROM newspaper
LEFT JOIN online
  ON newspaper.id = online.id
WHERE online.id IS NULL;
#-----------------------------------

SELECT *
FROM classes
JOIN students
  ON classes.id = students.class_id;

SELECT COUNT(*)
FROM newspaper
WHERE start_month <= 3
  AND end_month >= 3;

SELECT *
FROM newspaper
CROSS JOIN months;

/* Selects all months where user is subscribed */
SELECT *
FROM newspaper
CROSS JOIN months
WHERE start_month <= months.month
  AND end_month >= months.month;

/* total users subscribed montly, aggregated counts */
SELECT month,
  COUNT(*)
FROM newspaper
CROSS JOIN months
WHERE start_month <= months.month
  AND end_month >= months.month
GROUP BY 1;
#------------------------------

SELECT *
FROM newspaper
UNION
SELECT *
FROM online;

#---------------------
/* WITH joins result of a search query (creates temp table) with another table */

WITH previous_query AS(
SELECT customer_id,
  COUNT(subscription_id) AS 'subscriptions'
FROM orders
GROUP BY customer_id
)
SELECT customers.customer_name, previous_query.subscriptions
FROM previous_query
JOIN customers
  ON previous_query.customer_id = customers.customer_id;
#-----------------------------------------------
/* Multiple tables */
SELECT * FROM trips;

SELECT * FROM riders;

SELECT * FROM cars;

/* Combines rider names with car models */
SELECT riders.first,
  riders.last,
  cars.model
FROM riders, cars;

SELECT *
FROM trips
LEFT JOIN riders
  ON trips.rider_id = riders.id;

SELECT *
FROM trips
JOIN cars
  ON trips.car_id = cars.id;

SELECT car_id,
  AVG(cost) AS "Average Trip Cost"
FROM trips
GROUP BY car_id;

WITH previous_query AS(
SELECT *
FROM riders
UNION
SELECT *
FROM riders2
)
SELECT previous_query.id,
  previous_query.first,
  previous_query.last,
  previous_query.total_trips
FROM previous_query
WHERE total_trips < 500;

SELECT COUNT(*)
FROM cars
WHERE cars.status = 'active';

SELECT *
FROM cars
ORDER BY cars.trips_completed DESC
LIMIT 2;